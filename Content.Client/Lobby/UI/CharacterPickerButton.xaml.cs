using System.Linq;
using Content.Client.Humanoid;
using Content.Shared.Clothing;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Roles;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Map;
using Robust.Shared.Prototypes;

namespace Content.Client.Lobby.UI;

/// <summary>
/// Holds character data on the side of the setup GUI.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class CharacterPickerButton : ContainerButton
{
    private IEntityManager _entManager;

    private EntityUid _previewDummy;

    /// <summary>
    /// Invoked if we should delete the attached character
    /// </summary>
    public event Action? OnDeletePressed;

    public CharacterPickerButton(
        IEntityManager entityManager,
        IPrototypeManager prototypeManager,
        ButtonGroup group,
        ICharacterProfile profile,
        bool isSelected)
    {
        _entManager = entityManager;
        AddStyleClass(StyleClassButton);
        ToggleMode = true;
        Group = group;

        var humanoid = profile as HumanoidCharacterProfile;
        if (humanoid is not null)
        {
            var dummy = prototypeManager.Index<SpeciesPrototype>(humanoid.Species).DollPrototype;
            _previewDummy = entityManager.SpawnEntity(dummy, MapCoordinates.Nullspace);
        }
        else
        {
            _previewDummy = entityManager.SpawnEntity(prototypeManager.Index<SpeciesPrototype>(SharedHumanoidAppearanceSystem.DefaultSpecies).DollPrototype, MapCoordinates.Nullspace);
        }

        entityManager.System<HumanoidAppearanceSystem>().LoadProfile(_previewDummy, (HumanoidCharacterProfile)profile);

        if (humanoid != null)
        {
            var controller = UserInterfaceManager.GetUIController<LobbyUIController>();
            var job = controller.GetPreferredJob(humanoid);
            controller.GiveDummyJobClothes(_previewDummy, humanoid, job);

            if (prototypeManager.HasIndex<RoleLoadoutPrototype>(LoadoutSystem.GetJobPrototype(job.ID)))
            {
                var loadout = humanoid.GetLoadoutOrDefault(LoadoutSystem.GetJobPrototype(job.ID), humanoid.Species, entityManager, prototypeManager);
                controller.GiveDummyLoadout(_previewDummy, loadout);
            }
        }

        Pressed = isSelected;
        DeleteButton.Visible = !isSelected;

        View.SetEntity(_previewDummy);

        var description = profile.Name;

        var highPriorityJob = humanoid?.JobPriorities.SingleOrDefault(p => p.Value == JobPriority.High).Key;
        if (highPriorityJob != null)
        {
            var jobName = prototypeManager.Index<JobPrototype>(highPriorityJob).LocalizedName;
            description = $"{description}\n{jobName}";
        }

        DescriptionLabel.Text = description;

        ConfirmDeleteButton.OnPressed += _ =>
        {
            Parent?.RemoveChild(this);
            Parent?.RemoveChild(ConfirmDeleteButton);
            OnDeletePressed?.Invoke();
        };

        DeleteButton.OnPressed += _ =>
        {
            DeleteButton.Visible = false;
            ConfirmDeleteButton.Visible = true;
        };
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        if (!disposing)
            return;

        _entManager.DeleteEntity(_previewDummy);
        _previewDummy = default;
    }
}
