using System.Linq;
using Content.Client.Stylesheets;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Collections;
using Robust.Shared.Configuration;

namespace Content.Client.Options.UI;

[GenerateTypedNameReferences]
public sealed partial class OptionsTabControlRow : Control
{
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IConfigurationManager _cfg = default!;

    private ValueList<BaseOption> _options;

    public OptionsTabControlRow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ResetButton.StyleClasses.Add(StyleBase.ButtonOpenRight);
        ApplyButton.OnPressed += ApplyButtonPressed;
        ResetButton.OnPressed += ResetButtonPressed;
        DefaultButton.OnPressed += DefaultButtonPressed;
    }

    public void AddOption(BaseOption option)
    {
        _options.Add(option);
    }

    public void AddOptionCheckBox(CVarDef<bool> cVar, CheckBox checkBox)
    {
        AddOption(new OptionCheckboxCVar(this, _cfg, cVar, checkBox));
    }

    public void AddOptionPercentSlider(CVarDef<float> cVar, OptionSlider slider)
    {
        AddOption(new OptionSliderFloatCVar(this, _cfg, cVar, slider, 0, 1, FormatPercent));
    }

    public void AddOptionSlider(CVarDef<int> cVar, OptionSlider slider)
    {
    }

    public void ValueChanged()
    {
        UpdateButtonState();
    }

    private void UpdateButtonState()
    {
        var anyModified = _options.Any(option => option.IsModified());
        var anyModifiedFromDefault = _options.Any(option => option.IsModifiedFromDefault());

        DefaultButton.Disabled = !anyModifiedFromDefault;
        ApplyButton.Disabled = !anyModified;
        ResetButton.Disabled = !anyModified;
    }

    private void ApplyButtonPressed(BaseButton.ButtonEventArgs obj)
    {
        foreach (var option in _options)
        {
            if (option.IsModified())
                option.SaveValue();
        }

        _cfg.SaveToFile();
        UpdateButtonState();
    }

    private void ResetButtonPressed(BaseButton.ButtonEventArgs obj)
    {
        foreach (var option in _options)
        {
            option.LoadValue();
        }

        UpdateButtonState();
    }

    private void DefaultButtonPressed(BaseButton.ButtonEventArgs obj)
    {
        foreach (var option in _options)
        {
            option.ResetToDefault();
        }

        UpdateButtonState();
    }

    private string FormatPercent(float value)
    {
        return _loc.GetString("ui-options-value-percent", ("value", value));
    }

    public void Initialize()
    {
        foreach (var option in _options)
        {
            option.LoadValue();
        }

        UpdateButtonState();
    }
}

public abstract class BaseOption(OptionsTabControlRow controller)
{
    protected void ValueChanged()
    {
        controller.ValueChanged();
    }

    public abstract void LoadValue();
    public abstract void SaveValue();

    public abstract void ResetToDefault();

    public abstract bool IsModified();
    public abstract bool IsModifiedFromDefault();
}

public abstract class BaseOptionCVar<TValue> : BaseOption
    where TValue : notnull
{
    private readonly IConfigurationManager _cfg;
    private readonly CVarDef<TValue> _cVar;

    protected abstract TValue Value { get; set; }

    protected BaseOptionCVar(
        OptionsTabControlRow controller,
        IConfigurationManager cfg,
        CVarDef<TValue> cVar)
        : base(controller)
    {
        _cfg = cfg;
        _cVar = cVar;
    }

    public override void LoadValue()
    {
        Value = _cfg.GetCVar(_cVar);
    }

    public override void SaveValue()
    {
        _cfg.SetCVar(_cVar, Value);
    }

    public override void ResetToDefault()
    {
        Value = _cVar.DefaultValue;
    }

    public override bool IsModified()
    {
        return !IsValueEqual(Value, _cfg.GetCVar(_cVar));
    }

    public override bool IsModifiedFromDefault()
    {
        return !IsValueEqual(Value, _cVar.DefaultValue);
    }

    protected virtual bool IsValueEqual(TValue a, TValue b)
    {
        return EqualityComparer<TValue>.Default.Equals(a, b);
    }
}

public sealed class OptionCheckboxCVar : BaseOptionCVar<bool>
{
    private readonly CheckBox _checkBox;

    protected override bool Value
    {
        get => _checkBox.Pressed;
        set => _checkBox.Pressed = value;
    }

    public OptionCheckboxCVar(
        OptionsTabControlRow controller,
        IConfigurationManager cfg,
        CVarDef<bool> cVar,
        CheckBox checkBox)
        : base(controller, cfg, cVar)
    {
        _checkBox = checkBox;
        checkBox.OnToggled += _ =>
        {
            ValueChanged();
        };
    }
}

public sealed class OptionSliderFloatCVar : BaseOptionCVar<float>
{
    private readonly CVarDef<float> _cVar;
    private readonly OptionSlider _slider;
    private readonly Func<float, string> _format;

    protected override float Value
    {
        get => _slider.Slider.Value;
        set => _slider.Slider.Value = value;
    }

    public OptionSliderFloatCVar(
        OptionsTabControlRow controller,
        IConfigurationManager cfg,
        CVarDef<float> cVar,
        OptionSlider slider,
        float minValue,
        float maxValue,
        Func<float, string> format) : base(controller, cfg, cVar)
    {
        _cVar = cVar;
        _slider = slider;
        _format = format;

        slider.Slider.MinValue = minValue;
        slider.Slider.MaxValue = maxValue;

        slider.Slider.OnValueChanged += _ =>
        {
            ValueChanged();
            UpdateLabelValue();
        };
    }

    private void UpdateLabelValue()
    {
        _slider.ValueLabel.Text = _format(_slider.Slider.Value);
    }
}
