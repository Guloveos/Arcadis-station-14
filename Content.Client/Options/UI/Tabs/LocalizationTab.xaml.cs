using System.Globalization;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared;
using Robust.Shared.Configuration;

namespace Content.Client.Options.UI.Tabs;

[GenerateTypedNameReferences]
public sealed partial class LocalizationTab : Control
{
    [Dependency] private readonly IConfigurationManager _configuration = default!;
    [Dependency] private readonly ILocalizationManager _localization = default!;
    [Dependency] private readonly IUserInterfaceManager _ui = default!;

    private Dictionary<CultureInfo, int> _cultures = new();

    public LocalizationTab()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        ReloadCultures();

        var configCulture = new CultureInfo(_configuration.GetCVar(CVars.CultureName));
        _cultures.TryGetValue(configCulture, out var configCultureId);
        CultureOption.Select((int?)configCultureId ?? 0);

        CultureOption.OnItemSelected += args =>
        {
            foreach (var (culture, id) in _cultures)
            {
                if (args.Id != id)
                    continue;

                CultureOption.Select(id);

                _configuration.SetCVar(CVars.CultureName, culture.Name);
                _ui.Popup(Loc.GetString("ui-options-culture-change-popup"));
                return;
            }
        };
    }

    private void ReloadCultures()
    {
        _cultures.Clear();
        CultureOption.Clear();

        var i = 0;
        foreach (var culture in _localization.GetFoundCultures())
        {
            _cultures.Add(culture, i);
            CultureOption.AddItem(culture.Name, i);

            i++;
        }
    }
}
