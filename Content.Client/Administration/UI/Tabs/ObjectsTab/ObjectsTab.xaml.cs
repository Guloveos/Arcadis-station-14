using System;
using System.Collections.Generic;
using System.Linq;
using Content.Client.Station;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Map.Components;
using Robust.Shared.Timing;

namespace Content.Client.Administration.UI.Tabs.ObjectsTab
{
    [GenerateTypedNameReferences]
    public sealed partial class ObjectsTab : Control
    {
        [Dependency] private readonly EntityManager _entityManager = default!;
        [Dependency] private readonly IGameTiming _timing = default!;

        private readonly List<ObjectsTabEntry> _objects = new();
        private List<ObjectsTabSelection> _selections = new();
        private string _searchText = string.Empty;

        public event Action<ObjectsTabEntry, GUIBoundKeyEventArgs>? OnEntryKeyBindDown;

        private TimeSpan _updateFrequency = TimeSpan.FromSeconds(2);
        private TimeSpan _nextUpdate = TimeSpan.FromSeconds(2);

        private ObjectsTabHeader.Header _headerClicked = ObjectsTabHeader.Header.ObjectName;
        private bool _ascending = true;

        public ObjectsTab()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            ObjectTypeOptions.OnItemSelected += ev =>
            {
                ObjectTypeOptions.SelectId(ev.Id);
                RefreshObjectList(_selections[ev.Id]);
            };

            foreach (var type in Enum.GetValues(typeof(ObjectsTabSelection)))
            {
                _selections.Add((ObjectsTabSelection)type!);
                ObjectTypeOptions.AddItem(Enum.GetName((ObjectsTabSelection)type)!);
            }

            ListHeader.OnHeaderClicked += HeaderClicked;
            SearchBar.OnTextChanged += SearchBarOnTextChanged;

            RefreshObjectList();
        }

        private void SearchBarOnTextChanged(LineEdit.LineEditEventArgs obj)
        {
            _searchText = obj.Text.Trim();
            RefreshObjectList();
        }

        private void RefreshObjectList()
        {
            RefreshObjectList(_selections[ObjectTypeOptions.SelectedId]);
        }

        private void RefreshObjectList(ObjectsTabSelection selection)
        {
            var entities = new List<(string Name, NetEntity Entity)>();
            switch (selection)
            {
                case ObjectsTabSelection.Stations:
                    entities.AddRange(_entityManager.EntitySysManager.GetEntitySystem<StationSystem>().Stations);
                    break;
                case ObjectsTabSelection.Grids:
                {
                    var query = _entityManager.AllEntityQueryEnumerator<MapGridComponent, MetaDataComponent>();
                    while (query.MoveNext(out var uid, out _, out var metadata))
                    {
                        entities.Add((metadata.EntityName, _entityManager.GetNetEntity(uid)));
                    }

                    break;
                }
                case ObjectsTabSelection.Maps:
                {
                    var query = _entityManager.AllEntityQueryEnumerator<MapComponent, MetaDataComponent>();
                    while (query.MoveNext(out var uid, out _, out var metadata))
                    {
                        entities.Add((metadata.EntityName, _entityManager.GetNetEntity(uid)));
                    }
                    break;
                }
                default:
                    throw new ArgumentOutOfRangeException(nameof(selection), selection, null);
            }

            if (!string.IsNullOrEmpty(_searchText))
            {
                entities = entities.Where(e =>
                    e.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) ||
                    e.Entity.ToString().Contains(_searchText, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            foreach (var control in _objects)
            {
                ObjectList.RemoveChild(control);
            }

            _objects.Clear();

            var sortedEntities = _ascending
                ? entities.OrderBy(e => GetComparableValue(e, _headerClicked)).ToList()
                : entities.OrderByDescending(e => GetComparableValue(e, _headerClicked)).ToList();

            foreach (var (name, nent) in sortedEntities)
            {
                var ctrl = new ObjectsTabEntry(name, nent);
                _objects.Add(ctrl);
                ObjectList.AddChild(ctrl);
                ctrl.OnKeyBindDown += args => OnEntryKeyBindDown?.Invoke(ctrl, args);
            }
        }

        private object GetComparableValue((string Name, NetEntity Entity) entity, ObjectsTabHeader.Header header)
        {
            return header switch
            {
                ObjectsTabHeader.Header.ObjectName => entity.Name,
                ObjectsTabHeader.Header.EntityID => entity.Entity.ToString(),
                _ => entity.Name
            };
        }

        private void HeaderClicked(ObjectsTabHeader.Header header)
        {
            if (_headerClicked == header)
            {
                _ascending = !_ascending;
            }
            else
            {
                _headerClicked = header;
                _ascending = true;
            }

            ListHeader.UpdateHeaderSymbols(_headerClicked, _ascending);
            RefreshObjectList();
        }

        protected override void FrameUpdate(FrameEventArgs args)
        {
            base.FrameUpdate(args);

            if (_timing.CurTime < _nextUpdate)
                return;

            _nextUpdate = _timing.CurTime + _updateFrequency;

            RefreshObjectList();
        }

        private enum ObjectsTabSelection
        {
            Grids,
            Maps,
            Stations,
        }
    }
}
